//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/BullethellInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Assets.draco18s.bulletboss.input
{
    public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""BullethellInput"",
    ""maps"": [
        {
            ""name"": ""PatternEditor"",
            ""id"": ""9adc4e8c-7ccd-40dd-81d5-4c9dde9ad758"",
            ""actions"": [
                {
                    ""name"": ""Shift Fidelity"",
                    ""type"": ""Button"",
                    ""id"": ""c271db83-0ad6-4d07-969f-9f86c0728687"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5b048bbd-3e17-489c-b15e-45bde6f8e1b5"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Shift Fidelity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardMouse"",
            ""bindingGroup"": ""KeyboardMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // PatternEditor
            m_PatternEditor = asset.FindActionMap("PatternEditor", throwIfNotFound: true);
            m_PatternEditor_ShiftFidelity = m_PatternEditor.FindAction("Shift Fidelity", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PatternEditor
        private readonly InputActionMap m_PatternEditor;
        private List<IPatternEditorActions> m_PatternEditorActionsCallbackInterfaces = new List<IPatternEditorActions>();
        private readonly InputAction m_PatternEditor_ShiftFidelity;
        public struct PatternEditorActions
        {
            private @PlayerInputActions m_Wrapper;
            public PatternEditorActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @ShiftFidelity => m_Wrapper.m_PatternEditor_ShiftFidelity;
            public InputActionMap Get() { return m_Wrapper.m_PatternEditor; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PatternEditorActions set) { return set.Get(); }
            public void AddCallbacks(IPatternEditorActions instance)
            {
                if (instance == null || m_Wrapper.m_PatternEditorActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PatternEditorActionsCallbackInterfaces.Add(instance);
                @ShiftFidelity.started += instance.OnShiftFidelity;
                @ShiftFidelity.performed += instance.OnShiftFidelity;
                @ShiftFidelity.canceled += instance.OnShiftFidelity;
            }

            private void UnregisterCallbacks(IPatternEditorActions instance)
            {
                @ShiftFidelity.started -= instance.OnShiftFidelity;
                @ShiftFidelity.performed -= instance.OnShiftFidelity;
                @ShiftFidelity.canceled -= instance.OnShiftFidelity;
            }

            public void RemoveCallbacks(IPatternEditorActions instance)
            {
                if (m_Wrapper.m_PatternEditorActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPatternEditorActions instance)
            {
                foreach (var item in m_Wrapper.m_PatternEditorActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PatternEditorActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PatternEditorActions @PatternEditor => new PatternEditorActions(this);
        private int m_KeyboardMouseSchemeIndex = -1;
        public InputControlScheme KeyboardMouseScheme
        {
            get
            {
                if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardMouse");
                return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
            }
        }
        public interface IPatternEditorActions
        {
            void OnShiftFidelity(InputAction.CallbackContext context);
        }
    }
}
